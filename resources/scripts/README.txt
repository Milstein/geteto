==========================================
JaBUTi-CLI (JaBUTi Command-Line Interface)
==========================================

1. Getting JaBUTi Project
------------------------------------------
 Get JaBUTi project from svn://ccsl.ime.usp.br/jabuti/tags/JABUTI_1_0_3 and compile it.


2. Filling up the Configuration File
------------------------------------------
See the example.jbt file

* Mandatory Information
JABUTI_HOME      (The directory of step 1)
ORIG_DIR         (Original classes directory)
TEST_SCRIPT      (buid.xml with test targets)
TEST_SCRIPT_OUT  (Directory where the outputs from TEST_SCRIPT are generated) 
TEST_EXEC_CMD    (Target command for tests execution)  
SPAGO_DIR	 (Directory where the SPAGO4Q xml file will be saved)
SPAGO_ID 	 (Project ID in the SPAGO4Q)

* Optional Information
ORIG_JAR 	 (Jar package with original classes)
INSTRUM_JAR      (Jar package name that will be generated by instrumentation)


3. Executing the scripts
------------------------------------------
Each script has to receive the "-cfg" argument that correponds to the configuration file.
For example: jabuti-instrument -cfg example.jbt

There are 4 scripts that have to be executed in the following order:

1. jabuti-initialize

This script analizes the application under testing, then creates and configures some JaBUTi 
files and directories that will be used by the next scripts.

2. jabuti-instrument

It is responsible for instrumenting the classes in $ORIG_JAR. If this variable is not 
informed, the classes of $ORIG_DIR will be instrumented. As a result, a jar package with 
classes instrumented will be saved and named according to the value passed in $INSTRUM_JAR 
variable. If the $INSTRUM_JAR is empty, a temporary file with the classes instrumented are 
generated.


3. jabuti-execute

This script is in charge of executing the command informed in the $TEST_EXEC_CMD, generating 
trace files in the $TEST_SCRIPT_OUT directory.


4. jabuti-consolidate

The trace files generated during test suite execution are analized by this script. It is  
responsible for generating data coverage reports. In the end of process the data from all 
these reports are consolidated in a SPAGO4Q xml file, using the $SPAGO_ID as the
project identifier.

