/*
 * JFrmScript.java
 *
 * Created on 22 de Janeiro de 2009, 10:09
 */

package jabuti.ws.gui;

import static jabuti.ws.gui.DataUtils.getEndPoint;
import static jabuti.ws.gui.DataUtils.getProjectsDir;
import static jabuti.ws.gui.DataUtils.loadProjects;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import br.icmc.usp.jabuti.service.JaBUTiService1_0Stub.JabutiServiceProject;

/**
 *
 * @author  MarceloMEler
 */
public class JFrmScript extends javax.swing.JFrame {
    
    
	private String ProgramFilePath;
    private String TestingFilePath;
    private String TestingDirectoryPath;
    private String SuiteClass;
    private String ProjectName;
    private String User = "user";
    private String libraries[];
    private String endpoint;
    private String execString = "";

    
    private DefaultListModel dataModel_allClasses;
    private DefaultListModel dataModel_selectedClasses;
    private DefaultListModel dataModel_testingClasses;
    private DefaultListModel dataModel_library;
    private JabutiCLIConfiguration conf;
    private JabutiCLIExecution exec;
    private JabutiCLIResults res;
    
    private static final String END_POINT = getEndPoint();
    
    
    /** Creates new form JFrmScript */
    public JFrmScript() {
        initComponents();
        ProgramFilePath="";
        TestingFilePath="";
        SuiteClass="";
        TestingDirectoryPath="";
        ProjectName="";
//        User="";        

        dataModel_allClasses=new DefaultListModel();
        dataModel_selectedClasses=new DefaultListModel();
        dataModel_testingClasses=new DefaultListModel();
        dataModel_library = new DefaultListModel();

        jList_allClasses.setModel(dataModel_allClasses);
        jList_selectedClasses.setModel(dataModel_selectedClasses);
        jList_TestCases.setModel(dataModel_testingClasses);
        jList_library.setModel(dataModel_library);
               
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jtf_FilePath = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_allClasses = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jb_selectAllClasses = new javax.swing.JButton();
        jb_selectClass = new javax.swing.JButton();
        jb_removeSelectedClass = new javax.swing.JButton();
        jb_removeAllSelectedClasses = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_selectedClasses = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jtf_projectName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
//        jtf_user = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

//        jtf_Endpoint = new javax.swing.JTextField();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel5 = new javax.swing.JLabel();
        jtf_TestingFilePath = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_TestCases = new javax.swing.JList();
        jButton7 = new javax.swing.JButton();
        jtf_SuiteClass = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        jLayeredPane8 = new javax.swing.JLayeredPane();
        jtf_TestingDirectory = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_library = new javax.swing.JList();
        jb_addLibrary = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jb_removeLibrary = new javax.swing.JButton();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jcb_getCoverageByCriteria = new javax.swing.JCheckBox();
        jcb_getCoverageByClasses = new javax.swing.JCheckBox();
        jcb_getCoverageByMethods = new javax.swing.JCheckBox();
        jcb_getAllCoveredAndUncoveredElements = new javax.swing.JCheckBox();
        jcb_getRequiredElements = new javax.swing.JCheckBox();
        jcb_getMetrics = new javax.swing.JCheckBox();
        jcb_getGraphs = new javax.swing.JCheckBox();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
		loadProjects();
        conf = new JabutiCLIConfiguration(this);
        exec = new JabutiCLIExecution(this);
        res = new JabutiCLIResults(this);
        
        setTitle("Wizard for testing Java programs using JaBUTiService");
        
        JPanel northPanel = new JPanel();
        northPanel.add(new JLabel("Endpoint:"));
        jtf_listEndpoint = new JTextField(
        		END_POINT);
        northPanel.add(jtf_listEndpoint);
        northPanel.add(new JLabel("Project ID: "));
        jtf_projectId = new JTextField(15);
        northPanel.add(jtf_projectId);
        getContentPane().add(northPanel, BorderLayout.NORTH);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        JLayeredPane projectListPane = new JLayeredPane();
        projectListPane.setLayout(new BorderLayout());
        projectTable = new JTable();
        JPanel listNorthPanel = new JPanel();
        listNorthPanel.add(new JLabel("Project List"));
        JButton updateButton = new JButton("Update");
        listNorthPanel.add(updateButton);      
        projectListPane.add(listNorthPanel, BorderLayout.NORTH);
        projectListPane.add(new JScrollPane(projectTable));
        jTabbedPane1.add("Project List", projectListPane);
        updateButton.addActionListener(new ActionListener(){
        	@Override
        	public void actionPerformed(ActionEvent e) {
        		listUpdateButtonPressed();
        	}
        });
        final JPopupMenu popup = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete");
        deleteItem.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				int row = projectTable.getSelectedRow();
				String id = (String) projectTable.getValueAt(row, 0);
				endpoint = jtf_listEndpoint.getText();
				Script.deleteProject(endpoint, id);
				listUpdateButtonPressed();
			}
		});
        popup.add(deleteItem);
        projectTable.addMouseListener(new MouseAdapter() {			
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getButton() == MouseEvent.BUTTON3) {
					int row = projectTable.rowAtPoint(e.getPoint());
					projectTable.setRowSelectionInterval(row, row);
					popup.show(projectTable, e.getX(), e.getY());
				}				
			}
		});
        
      
        
        
      //Update Project
        jLabel12 = new javax.swing.JLabel();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        jtf_FilePathUpdate = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel(); 
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
//        jtf_EndpointUpdate = new javax.swing.JTextField();
        
        jLabel12.setText("Select a Java program for instrumentation");
        jLabel12.setBounds(10, 70, 330, 17);
        jLayeredPane5.add(jLabel12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jtf_FilePathUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_FilePathActionPerformed(evt);
            }
        });
        jtf_FilePathUpdate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf1_FilePathFocusLost(evt);
            }
        });
        jtf_FilePathUpdate.getDocument().addDocumentListener(new DocumentListener() {
			
			@Override
			public void removeUpdate(DocumentEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void insertUpdate(DocumentEvent arg0) {				
				Document doc = arg0.getDocument();
				try {
					jtf_TestingFilePath.setText(doc.getText(0, doc.getLength()));
				} catch (BadLocationException e) {
					//...
				}				
			}
			
			@Override
			public void changedUpdate(DocumentEvent arg0) {				
				Document doc = arg0.getDocument();
				try {
					jtf_TestingFilePath.setText(doc.getText(0, doc.getLength()));
				} catch (BadLocationException e) {
					//...
				}
			}
		});
        jtf_FilePathUpdate.setBounds(10, 90, 620, 27);
        jLayeredPane5.add(jtf_FilePathUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton11.setText("Procurar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jButton11.setBounds(640, 90, 140, 29);
        jLayeredPane5.add(jButton11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane5.setViewportView(jList_allClasses);

        jScrollPane5.setBounds(10, 170, 340, 310);
        jLayeredPane5.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel13.setText("Select classes to be instrumented");
        jLabel13.setBounds(280, 130, 250, 20);
        jLayeredPane5.add(jLabel13, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel14.setText("All classes");
        jLabel14.setBounds(150, 150, 100, 17);
        jLayeredPane5.add(jLabel14, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jb_selectAllClassesUpdate = new javax.swing.JButton();
        jb_selectAllClassesUpdate.setText(">>>>*");
        jb_selectAllClassesUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_selectAllClassesActionPerformed(evt);
            }
        });
        jb_selectAllClassesUpdate.setBounds(360, 320, 90, 29);
        jLayeredPane5.add(jb_selectAllClassesUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jb_selectClassUpdate = new javax.swing.JButton();
        jb_selectClassUpdate.setText(">>>>");
        jb_selectClassUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_selectClassActionPerformed(evt);
            }
        });
        jb_selectClassUpdate.setBounds(360, 240, 90, 29);
        jLayeredPane5.add(jb_selectClassUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jb_removeSelectedClassUpdate = new javax.swing.JButton();
        jb_removeSelectedClassUpdate.setText("<<<<");
        jb_removeSelectedClassUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_removeSelectedClassActionPerformed(evt);
            }
        });
        jb_removeSelectedClassUpdate.setBounds(360, 280, 90, 29);
        jLayeredPane5.add(jb_removeSelectedClassUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jb_removeAllSelectedClassesUpdate = new javax.swing.JButton();
        jb_removeAllSelectedClassesUpdate.setText("*<<<<");
        jb_removeAllSelectedClassesUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_removeAllSelectedClassesActionPerformed(evt);
            }
        });
        jb_removeAllSelectedClassesUpdate.setBounds(360, 360, 90, 29);
        jLayeredPane5.add(jb_removeAllSelectedClassesUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane6.setViewportView(jList_selectedClasses);

        jScrollPane6.setBounds(460, 170, 340, 310);
        jLayeredPane5.add(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel15.setText("Selected classes");
        jLabel15.setBounds(600, 150, 130, 20);
        jLayeredPane5.add(jLabel15, javax.swing.JLayeredPane.DEFAULT_LAYER);

//        jLabel16.setText("Project ID:");
//        jLabel16.setBounds(10, 10, 110, 17);
//        jLayeredPane5.add(jLabel16, javax.swing.JLayeredPane.DEFAULT_LAYER);

        
//        jtf_projectNameUpdate = new javax.swing.JTextField();
//        jtf_projectNameUpdate.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jtf_projectNameActionPerformed(evt);
//            }
//        });
//        jtf_projectNameUpdate.setBounds(10, 30, 190, 27);
//        jLayeredPane5.add(jtf_projectNameUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

//        jLabel17.setText("User:");
//        jLabel17.setBounds(220, 10, 90, 17);
//        jLayeredPane5.add(jLabel17, javax.swing.JLayeredPane.DEFAULT_LAYER);
//        jtf_user.setBounds(210, 30, 110, 27);
//        jLayeredPane5.add(jtf_user, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton12.setText("Limpar");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton12.setBounds(366, 400, 80, 29);
        jLayeredPane5.add(jButton12, javax.swing.JLayeredPane.DEFAULT_LAYER);

//        jLabel18.setText("Endpoint");
//        jLabel18.setBounds(340, 10, 90, 17);
//        jLayeredPane5.add(jLabel18, javax.swing.JLayeredPane.DEFAULT_LAYER);
//        jtf_EndpointUpdate.setBounds(340, 30, 440, 27);
//        jLayeredPane5.add(jtf_EndpointUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        JButton jbUpdate = new JButton("Update");
        jbUpdate.setBounds(366, 450, 80, 29);
        jLayeredPane5.add(jbUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jbUpdate.addActionListener(new ActionListener(){
        	@Override
        	public void actionPerformed(ActionEvent e) {        		
        		String id = jtf_projectId.getText();
//        		User = jtf_user.getText();
        		endpoint = jtf_listEndpoint.getText();
        		ProgramFilePath = jtf_FilePathUpdate.getText();
        		String[] classes = new String[]{"*"};
        		Script.update(id, endpoint, ProgramFilePath);        		
        	}
        });
        
        jTabbedPane1.addTab("Update Project", jLayeredPane5);

        
        
        jLabel5.setText("Select a set of test cases for testing the selected Java program");
        jLabel5.setBounds(10, 20, 540, 17);
        jLayeredPane2.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jtf_TestingFilePath.setBounds(10, 40, 550, 27);
        jtf_TestingFilePath.getDocument().addDocumentListener(new DocumentListener() {
			
			@Override
			public void removeUpdate(DocumentEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void insertUpdate(DocumentEvent evt) {
				Document doc = evt.getDocument();
				TestingFilePath = jtf_TestingFilePath.getText();
				openTestingZipFile();		
			}
			
			@Override
			public void changedUpdate(DocumentEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
        jLayeredPane2.add(jtf_TestingFilePath, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton6.setText("Procurar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.setBounds(570, 40, 120, 29);
        jLayeredPane2.add(jButton6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel6.setText("Select the Test Suite");
        jLabel6.setBounds(10, 80, 170, 17);
        jLayeredPane2.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane3.setViewportView(jList_TestCases);

        jScrollPane3.setBounds(10, 110, 670, 260);
        jLayeredPane2.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton7.setText("Selecionar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jButton7.setBounds(100, 380, 80, 29);
        jLayeredPane2.add(jButton7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jtf_SuiteClass.setBounds(190, 380, 490, 27);
        jLayeredPane2.add(jtf_SuiteClass, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton3.setText("Limpar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setBounds(10, 380, 80, 29);
        jLayeredPane2.add(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        JButton jbAdd = new JButton("Send");
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {            	
        		endpoint = jtf_listEndpoint.getText();        		
        		TestingFilePath = jtf_TestingFilePath.getText();
        		SuiteClass = jtf_SuiteClass.getText();
        		String projectid = jtf_projectId.getText();
            	Script.addTestCases(endpoint, TestingFilePath, SuiteClass, projectid);
            }
        });
        jbAdd.setBounds(10, 430, 80, 29);
        jLayeredPane2.add(jbAdd, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
//        JLabel jlb_projectid = new JLabel("Project ID:");
//        jlb_projectid.setBounds(100, 430, 70, 29);
//        jLayeredPane2.add(jlb_projectid, javax.swing.JLayeredPane.DEFAULT_LAYER);
//        
//        final JTextField jtf_projectid = new JTextField();
//        jtf_projectid.setBounds(180, 430, 150, 29);
        
        projectTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        	public void valueChanged(ListSelectionEvent e) {
        		int rowSelected = projectTable.getSelectedRow();
        		if (rowSelected > -1) {
        			jtf_projectId.setText(projectTable.getValueAt(rowSelected, 0).toString());
        			String projectName = projectTable.getValueAt(rowSelected, 1).toString();
        			
        			File projectDir = new File(getProjectsDir() + "/" + jtf_projectId.getText());
        			if(!projectDir.exists())
        				projectDir.mkdir();
        			
        			conf.refreshSpago4QName(projectName);
        			exec.refreshSpago4QName(projectName);
        			res.refreshSpago4QName(projectName);

        			
        		
        		}
        	}
        });
    
        
//        jLayeredPane2.add(jtf_projectid, javax.swing.JLayeredPane.DEFAULT_LAYER);        

        jTabbedPane1.addTab("Add TestCases", jLayeredPane2);
       
        
        // Script Configurations
        
        
       	conf.confFileForm(jLayeredPane4);        
        jTabbedPane1.addTab("Configuration", jLayeredPane4);
        
        exec.execForm(jLayeredPane7);
        jTabbedPane1.addTab("Execution", jLayeredPane7);
        
        res.resForm(jLayeredPane8);
        jTabbedPane1.addTab("Results", jLayeredPane8);
        
        
        jcb_getCoverageByCriteria.setText("getCoverageByCriteria");
        jcb_getCoverageByCriteria.setBounds(10, 40, 240, 22);
        jLayeredPane3.add(jcb_getCoverageByCriteria, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jcb_getCoverageByClasses.setText("getCoverageByClasses");
        jcb_getCoverageByClasses.setBounds(10, 70, 220, 22);
        jLayeredPane3.add(jcb_getCoverageByClasses, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jcb_getCoverageByMethods.setText("getCoverageByMethods");
        jcb_getCoverageByMethods.setBounds(10, 100, 230, 22);
        jLayeredPane3.add(jcb_getCoverageByMethods, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jcb_getAllCoveredAndUncoveredElements.setText("getAllCoveredAndUncoveredElements");
        jcb_getAllCoveredAndUncoveredElements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_getAllCoveredAndUncoveredElementsActionPerformed(evt);
            }
        });
        jcb_getAllCoveredAndUncoveredElements.setBounds(10, 130, 300, 22);
        jLayeredPane3.add(jcb_getAllCoveredAndUncoveredElements, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jcb_getRequiredElements.setText("getRequiredElements");
        jcb_getRequiredElements.setBounds(10, 10, 270, 22);
        jLayeredPane3.add(jcb_getRequiredElements, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jcb_getMetrics.setText("getMetrics");
        jcb_getMetrics.setBounds(10, 160, 210, 22);
        jLayeredPane3.add(jcb_getMetrics, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jcb_getGraphs.setText("getGraphs");
        jcb_getGraphs.setBounds(10, 190, 210, 22);
        jLayeredPane3.add(jcb_getGraphs, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        JButton jb_getReports = new JButton("Get Reports");
        jb_getReports.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				endpoint = jtf_listEndpoint.getText();
				String id = jtf_projectId.getText();
				TestingDirectoryPath = jtf_TestingDirectory.getText();
				 boolean reports[] = new boolean[7];
			        reports[0]=jcb_getAllCoveredAndUncoveredElements.isSelected();
			        reports[1]=jcb_getCoverageByClasses.isSelected();
			        reports[2]=jcb_getCoverageByCriteria.isSelected();
			        reports[3]=jcb_getCoverageByMethods.isSelected();
			        reports[4]=jcb_getRequiredElements.isSelected();
			        reports[5]=jcb_getMetrics.isSelected();
			        reports[6]=jcb_getGraphs.isSelected();
				Script.getReports(endpoint, id, TestingDirectoryPath, reports);
			}
		});
        jb_getReports.setBounds(250, 190, 60, 22);
        jLayeredPane3.add(jb_getReports, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane1.addTab("Reports", jLayeredPane3);


        JPanel mainPane = new JPanel();
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(mainPane);
        mainPane.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(346, Short.MAX_VALUE)
                .addGap(340, 340, 340))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
        );
        getContentPane().add(mainPane);      

        pack();
    }// </editor-fold>
    
    private void listUpdateButtonPressed() {
    	String endpoint = jtf_listEndpoint.getText();
		JabutiServiceProject[] projs = Script.getProjects(endpoint);
		if (projs != null) {
			projectTable.setModel(getTableModel(projs));
		}
		else {
			JOptionPane.showMessageDialog(null, 
					"Problem while retrieving project list.\n" +
					"Check the web service logs.");
		}
    }
    
	private void jb_refreshActionPerformed(ActionEvent evt) {
		TestingDirectoryPath = jtf_TestingDirectory.getText();
		if (!TestingDirectoryPath.endsWith("\\")) {
			TestingDirectoryPath += "\\";
		}
		int library_size = jList_library.getModel().getSize();
        libraries = new String[library_size];
        for (int i=0; i<library_size; i++)
            libraries[i]=(String)dataModel_library.getElementAt(i);
		execString = "java -cp " + TestingDirectoryPath + "package.jar";			
		for (int i=0; i<libraries.length; i++) {
			execString = execString + ":" + libraries[i];
		}
		//execString += ":/home/besson/Jabuti_1_0_3-bin.jar";
		execString+=" br.jabuti.junitexec.JUnitJabutiCore -trace " +
				TestingDirectoryPath + "test.trc -cp ";
		SuiteClass = SuiteClass.replace(".class", "");
		SuiteClass = SuiteClass.replace('/', '.');
		execString = execString + TestingDirectoryPath + 
				"package.jar -tcClass " + SuiteClass; 
		// TODO Auto-generated method stub
		jta_CommandLine.setText(execString);
	}

    private void jcb_getAllCoveredAndUncoveredElementsActionPerformed(java.awt.event.ActionEvent evt) {                                                                      
        // TODO add your handling code here:
}                                                                     

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        SuiteClass = (String) jList_TestCases.getSelectedValue();
        jtf_SuiteClass.setText(SuiteClass);
}                                        

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
//        JDSelectFiles jdsf = new JDSelectFiles(this,true);
    	JFileChooser jdsf = new JFileChooser();
        jdsf.showOpenDialog(this);
        if (jdsf.getSelectedFile() != null) {
        	TestingFilePath = jdsf.getSelectedFile().getPath();
        	jtf_TestingFilePath.setText(TestingFilePath);
        	if (!TestingFilePath.equals(""))
        		this.openTestingZipFile();
        }
}                                        

    private void jb_removeAllSelectedClassesActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        // TODO add your handling code here:
        jList_selectedClasses.setSelectionInterval(0, jList_selectedClasses.getModel().getSize()-1);
        Object values[]= jList_selectedClasses.getSelectedValues();
        if (values.length>0)
            for (int i=0; i<values.length; i++)
            {
                dataModel_allClasses.addElement(values[i]);
                dataModel_selectedClasses.removeElement(values[i]);
            }
        
}                                                           

    private void jb_removeSelectedClassActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        Object values[]= jList_selectedClasses.getSelectedValues();
        if (values.length>0)
            for (int i=0; i<values.length; i++)
            {
                dataModel_allClasses.addElement(values[i]);
                dataModel_selectedClasses.removeElement(values[i]);

            }
}                                                      

    private void jb_selectClassActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        Object values[]= jList_allClasses.getSelectedValues();
        if (values.length>0)
            for (int i=0; i<values.length; i++)
            {
                dataModel_selectedClasses.addElement(values[i]);
                dataModel_allClasses.removeElement(values[i]);
            }
/*
        dataModel_selectedClasses.addElement(jList_allClasses.getSelectedValue());
        int index = jList_allClasses.getSelectedIndex();       
        dataModel_allClasses.remove(index);*/
        //jList_selectedClasses.setListData(jList_allClasses.getSelectedValues());
}                                              

    private void jb_selectAllClassesActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        //jList_selectedClasses.setListData(;
        jList_allClasses.setSelectionInterval(0, jList_allClasses.getModel().getSize()-1);
        Object values[]= jList_allClasses.getSelectedValues();
        if (values.length>0)
            for (int i=0; i<values.length; i++)
            {
                dataModel_selectedClasses.addElement(values[i]);
                dataModel_allClasses.removeElement(values[i]);
            }
}                                                   

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
//        JDSelectFiles jdsf = new JDSelectFiles(this,true);
    	JFileChooser jdsf = new JFileChooser();
        jdsf.showOpenDialog(this);
        if (jdsf.getSelectedFile() != null) {
        	ProgramFilePath = jdsf.getSelectedFile().getPath();
        	jtf_FilePath.setText(ProgramFilePath);
        	if (!ProgramFilePath.equals(""))
        		this.openZipFile();
        }
        //  String file =
} 
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
//        JDSelectFiles jdsf = new JDSelectFiles(this,true);
    	JFileChooser jdsf = new JFileChooser();
        jdsf.showOpenDialog(this);
        if (jdsf.getSelectedFile() != null) {
        	ProgramFilePath = jdsf.getSelectedFile().getPath();
        	jtf_FilePathUpdate.setText(ProgramFilePath);
        	if (!ProgramFilePath.equals(""))
        		this.openZipFile();
        }
        //  String file =
}    

    private void jtf_FilePathFocusLost(java.awt.event.FocusEvent evt) {                                       
        // TODO add your handling code here:
        if (!jtf_FilePath.getText().equals("")) {
            this.openZipFile();
        }
}              
    
    private void jtf1_FilePathFocusLost(java.awt.event.FocusEvent evt) {                                       
        // TODO add your handling code here:
        if (!jtf_FilePathUpdate.getText().equals("")) {
            this.openZipFile();
        }
}    

    private void jtf_FilePathActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    	
}                                            

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
           // TODO add your handling code here:
        //incluir script
        ProjectName = jtf_projectName.getText();
//        User = jtf_user.getText();
//        ProgramFilePath=jtf_FilePath.getText();
        ProgramFilePath=jtf_FilePathUpdate.getText();
        
        TestingFilePath=jtf_TestingFilePath.getText();
        SuiteClass=jtf_SuiteClass.getText();
        SuiteClass=SuiteClass.replace('/', '.');
        TestingDirectoryPath = jtf_TestingDirectory.getText();
    	TestingDirectoryPath+="/";

    	
        int library_size = jList_library.getModel().getSize();
        libraries = new String[library_size];
        for (int i=0; i<library_size; i++)
            libraries[i]=(String)dataModel_library.getElementAt(i);

        //for (int i=0; i<libraries.length; i++)
          //  System.out.println(libraries[i]);
        boolean reports[] = new boolean[7];
        reports[0]=jcb_getAllCoveredAndUncoveredElements.isSelected();
        reports[1]=jcb_getCoverageByClasses.isSelected();
        reports[2]=jcb_getCoverageByCriteria.isSelected();
        reports[3]=jcb_getCoverageByMethods.isSelected();
        reports[4]=jcb_getRequiredElements.isSelected();
        reports[5]=jcb_getMetrics.isSelected();
        reports[6]=jcb_getGraphs.isSelected();

        endpoint = jtf_listEndpoint.getText();
        ProjectName = jtf_projectName.getText();
//        User = jtf_user.getText();
        System.out.println("endpoint = " + endpoint);
        
        //jb_refreshActionPerformed(null);
        execString = jta_CommandLine.getText();
         Script.run(jtf_projectId.getText(),User,endpoint,ProgramFilePath, TestingFilePath, SuiteClass,TestingDirectoryPath,libraries,reports, execString);
         
    }                                        

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
//        JDSelectFiles jdsf = new JDSelectFiles(this,true);
    	JFileChooser jdsf = new JFileChooser();
        jdsf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jdsf.showOpenDialog(this);
        if (jdsf.getSelectedFile() != null) {
        	TestingDirectoryPath = jdsf.getSelectedFile().getPath();
        	jtf_TestingDirectory.setText(TestingDirectoryPath);
        }
    }                                        

    private void jb_addLibraryActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
//        JDSelectFiles jdsf = new JDSelectFiles(this,true);
    	JFileChooser jdsf = new JFileChooser();
        jdsf.showOpenDialog(this);
        if (jdsf.getSelectedFile() != null) {
        	dataModel_library.addElement(jdsf.getSelectedFile().getPath());
        }
}                                             

    private void jtf_projectNameActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
}                                               

    private void jb_removeLibraryActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        dataModel_library.removeElement(jList_library.getSelectedValue());
    }                                                

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
       dataModel_selectedClasses.removeAllElements();
       dataModel_allClasses.removeAllElements();
       jtf_FilePath.setText("");


    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        jtf_SuiteClass.setText("");
        jtf_TestingFilePath.setText("");
        dataModel_testingClasses.removeAllElements();
    }
    
    private void openZipFile()
    {
        Vector<String> dados = new Vector<String>();
        try {
            File f = new File(ProgramFilePath);
            ZipFile zippedFile = new JarFile(f);
            Enumeration classes = zippedFile.entries();
            ZipEntry zipEntry;
            
            while (classes.hasMoreElements())
            {
                zipEntry=(ZipEntry)classes.nextElement();
                //System.out.println(classes.nextElement().toString());
               // jList_allClasses.setList//
                if (zipEntry.getName().contains(".class"))
                    dataModel_allClasses.addElement(zipEntry.getName());
                //System.out.println(zipEntry.getName());
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrmScript.class.getName()).log(Level.SEVERE, null, ex);
        }     

    }
    
    private void openTestingZipFile()
    {
        Vector<String> dados = new Vector<String>();
        try {
            File f = new File(TestingFilePath);
            ZipFile zippedFile = new JarFile(f);
            Enumeration classes = zippedFile.entries();
            ZipEntry zipEntry;
            
            while (classes.hasMoreElements())
            {
                zipEntry=(ZipEntry)classes.nextElement();
                //System.out.println(classes.nextElement().toString());
               // jList_allClasses.setList//
                if (zipEntry.getName().contains(".class"))
                     dataModel_testingClasses.addElement(zipEntry.getName());
                //System.out.println(zipEntry.getName());
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrmScript.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    private TableModel getTableModel(JabutiServiceProject[] projects) {
    	DefaultTableModel model = new DefaultTableModel();
    	model.addColumn("ID");
    	model.addColumn("Name");
    	model.addColumn("State");
    	model.addColumn("Test Suite");
    	model.addColumn("Selected");
    	model.addColumn("Ignored");
    	for (JabutiServiceProject jsp : projects) {
    		Vector row = new Vector();
    		row.add(jsp.getProjid());
    		row.add(jsp.getName());
    		row.add(jsp.getState());
    		row.add(jsp.getTestsuiteclassname());
    		row.add(jsp.getSelectedclasses());
    		row.add(jsp.getIgnoredclasses());
    		model.addRow(row);
    	}
    	return model;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrmScript().setVisible(true);
            }
        });
    }

    private DefaultListModel listModel = new DefaultListModel();
    private JTextField jtf_listEndpoint;
    
    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JLayeredPane jLayeredPane8;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JList jList_TestCases;
    private javax.swing.JList jList_allClasses;
    private javax.swing.JList jList_library;
    private javax.swing.JList jList_selectedClasses;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jb_addLibrary;
    private javax.swing.JButton jb_refh;
    private javax.swing.JButton jb_removeAllSelectedClasses;
    private javax.swing.JButton jb_removeLibrary;
    private javax.swing.JButton jb_removeSelectedClass;
    private javax.swing.JButton jb_selectAllClasses;
    private javax.swing.JButton jb_selectClass;
    private javax.swing.JCheckBox jcb_getAllCoveredAndUncoveredElements;
    private javax.swing.JCheckBox jcb_getCoverageByClasses;
    private javax.swing.JCheckBox jcb_getCoverageByCriteria;
    private javax.swing.JCheckBox jcb_getCoverageByMethods;
    private javax.swing.JCheckBox jcb_getGraphs;
    private javax.swing.JCheckBox jcb_getMetrics;
    private javax.swing.JCheckBox jcb_getRequiredElements;
//    private javax.swing.JTextField jtf_Endpoint;
    private javax.swing.JTextField jtf_FilePath;
    private javax.swing.JTextField jtf_FilePathUpdate;
    private javax.swing.JTextField jtf_SuiteClass;
    private javax.swing.JTextField jtf_TestingDirectory;
    private javax.swing.JTextField jtf_TestingFilePath;
    private javax.swing.JTextField jtf_projectName;
//    private javax.swing.JTextField jtf_user;
//    private javax.swing.JTextField jtf_EndpointUpdate;
    private javax.swing.JTextArea jta_CommandLine;
    private javax.swing.JButton jb_selectAllClassesUpdate;
    private javax.swing.JButton jb_selectClassUpdate;
    private javax.swing.JButton jb_removeSelectedClassUpdate;
    private javax.swing.JButton jb_removeAllSelectedClassesUpdate;
    private javax.swing.JTextField jtf_projectId;
    private JTable projectTable;
    // End of variables declaration
   
}
