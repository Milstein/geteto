/*
Copyright (C) 2006 Auri Vicenzi and Marcio Delamaro

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

package br.jabuti.probe.mobiledevice;

import org.aspectj.apache.bcel.classfile.JavaClass;
import org.aspectj.apache.bcel.classfile.Method;
import org.aspectj.apache.bcel.generic.ClassGen;
import org.aspectj.apache.bcel.generic.ConstantPoolGen;
import org.aspectj.apache.bcel.generic.InstructionHandle;
import org.aspectj.apache.bcel.generic.InstructionList;
import org.aspectj.apache.bcel.generic.MethodGen;

import br.jabuti.instrumenter.bytecode.bcel.ASMInstrumenter;
import br.jabuti.util.ToolConstants;


/**
 This is the class that implements the functionality of a
 JVM code instrumenter. Using such object it is possible
 to insert JVM code in a given JVM method.
 */

public class HostProberInstrum {
    public static void usage() {
        System.out.println(ToolConstants.toolName + " v. " + ToolConstants.toolVersion);
        System.out.println("\nHostProberLoader usage:");
        System.out.println("-------------------\n");
        System.out.println("java br.jabuti.probe.mobiledevice.HostProberLoader [-CP <CLASSPATH>] [-D <DIR>] -P <PROJECT_NAME> <BASE_CLASS> [<PARAMETERS>]\n");
        System.out.println("      [-d <DIR>]              Optional parameter. Specify the directory where the project");
        System.out.println("                              is located. If not specified, the current directory is assumed.");
        System.out.println("      -p <PROJECT_FILE>       Specify the name of the project to be used. The");
        System.out.println("                              project must be a valid project file (.jbt) generated by");
        System.out.println("                              instrument the base class.");
        System.out.println("      -name <PROJECT_NAME>    Specifies the name of the project. This name will be ");
        System.out.println("                              used to identify the project to the MuServer");
        System.out.println("      -h <hostaddress>        Specifies the address of the server that will receive the test case agent");
        System.out.println("                              The format is hostname:port");
        System.out.println("      -delay <delaytime>      Specifies the amount of time to wait between agents to the test case server");
		System.out.println("      -o <dirname>            Specifies the name of the directory where to place instrumented files"); 
        System.out.println("      <BASE_CLASS>            The class file to be executed.");
        System.out.println("                              executed, it have to be specified.");
        System.out.println("\nCopyright (c) 2002\n");
    }

	/**
	 *  Instrumenta a classe base, methodo Main
	 */
	public static JavaClass instrumentMain(JavaClass jv, String hostName, String projName, int delay) 
	            throws Exception {
		ClassGen cg = new ClassGen(jv);				 
		ConstantPoolGen cp = cg.getConstantPool();
  		
		Method[] methods = cg.getMethods();
		int i = 0;
		for (i=0; i < methods.length; i++)
			if (methods[i].getName().equals("main")
				&& methods[i].getSignature().equals("([Ljava/lang/String;)V") 
				)
			{
				break;
			}
		if ( i >= methods.length)
		{
			System.out.println("Method static public main(String[]) not found");
			System.exit(0);
		}
		   	   
		MethodGen mg = new MethodGen(methods[i], 
				cg.getClassName(),
				cp);
                        
		InstructionList il = mg.getInstructionList();
		InstructionHandle last = il.getStart();
//		InstructionHandle pen = last.getPrev(); 
//		il.delete(il.getStart(), pen);
		ASMInstrumenter gi = new ASMInstrumenter(mg, cg, cp);
		gi.insertBefore(last, 
				" ldc \"" + hostName + "\"" + // empilha o endereco do servidor de teste
				" ldc \"" + projName + "\"" + // empilha o nome projeto
				" ldc " + delay  + // empilha o tempo de espera
				"aconst_null " +
				"invokestatic br.jabuti.probe.mobiledevice.mobile.HostProber" + 
				" init \"(Ljava/lang/String;Ljava/lang/String;ILmucode/MuServer;)V\"");
		methods[i] = mg.getMethod();
		cg.setConstantPool(cp);
		cg.setMethods(methods);
		return (cg.getJavaClass());

	}
}
