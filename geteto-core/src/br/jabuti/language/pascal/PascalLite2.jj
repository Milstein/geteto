PARSER_BEGIN(Pascal)

public class Pascal {
	public static void main (String[] args) {
		Pascal parser;
		String filename = null;
		long initTime = 0;
		long parseTime = 0;
		long startTime = 0;
		long stopTime = 0;
 		if (args.length == 1) {
	            filename = args[0];
      	      System.out.println("Compilador Pascal\nLendo arquivo " + filename);
            
			try {
      	          parser = new Pascal(new java.io.FileInputStream(filename));
      	      } catch (java.io.FileNotFoundException e) {
            	    System.out.println("Arquivo nao encontrado.");
	                return;
			}
		} else {
			System.out.println("Argumento invalido.");
			System.out.println("Como usar: java Pascal <arquivo>");
			return;
		}

		try {
			startTime = System.currentTimeMillis();
			parser.Programa();
			stopTime = System.currentTimeMillis();
			parseTime = stopTime - startTime;
			System.out.println("Nao foram encontrados erros em " + filename + " (" + parseTime + " ms).");
		} catch (ParseException e) {
			stopTime = System.currentTimeMillis();
			parseTime = stopTime - startTime;
			System.out.println(e.getMessage());
			System.out.println("Foram encontrados erros em " + filename + " (" + parseTime + " ms).");
		}
	}
}
PARSER_END(Pascal)

/* Palavras reservadas */
TOKEN : {
	< AND : "and" >
|	< ARRAY : "array" >
|	< BEGIN : "begin" >
|	< CASE : "case" >
|	< CHAR : "char" >
|	< CONST : "const" >
|	< DIV : "div" >
|	< DO : "do" >
|	< DOWNTO : "downto" >
|	< ELSE : "else" >
|	< END : "end" >
|	< FOR : "for" >
|	< FUNCTION : "function" >
|	< GOTO : "goto" >
|	< IF : "if" >
|	< IN : "in" >
|	< LABEL : "label" >
|	< MOD : "mod" >
|	< NOT : "not" >
|	< OF : "of" >
|	< OR : "or" >
|	< PACKED : "packed" >
|	< PROCEDURE : "procedure" >
|	< PROGRAM : "program" >
|	< RECORD : "record" >
|	< REPEAT : "repeat">
|	< SET : "set" >
|	< THEN : "then">
|	< TO : "to" >
|	< TYPE : "type" >
|	< UNTIL : "until">
|	< VAR : "var" >
|	< WHILE : "while" >
|	< WITH : "with" >
}

/* Simbolos especiais */
TOKEN : {
	< MAIS : "+" >
|	< MENOS : "-" >
|	< ASTERISCO : "*" >
|	< BARRA : "/" >
|	< IGUAL : "=" >
|	< MENOR : "<" >
|	< MAIOR : ">" >
|	< ABRE_COLCHETE : "[" >
|	< FECHA_COLCHETE : "]" >
|	< PONTO : "." >
|	< VIRGULA : "," >
|	< DOIS_PONTOS : ":" >
|	< PONTO_VIRGULA : ";" >
|	< ABRE_PARENTESE : "(" >
|	< FECHA_PARENTESE : ")" >
|	< DIFERENTE : "<>" >
|	< MENOR_IGUAL : "<=" >
|	< MAIOR_IGUAL : ">=" >
|	< ATRIBUICAO : ":=" >
|	< PONTO_PONTO : ".." >
|	< APOSTROFE : "'" >
}

TOKEN : {
	< IDENTIFICADOR: <LETRA> ( <LETRA> | <DIGITO> )* >
}

TOKEN : {
	< NUMERO : <INTEIRO_LITERAL> | <FLOATING_POINT_LITERAL> >
|	< #INTEIRO_LITERAL : (["0"-"9"])+ >
|	< #FLOATING_POINT_LITERAL :
		(["0"-"9"])+ "." (["0"-"9"])* (<EXPOENTE>)?
      |	"." (["0"-"9"])+ (<EXPOENTE>)?
      |	(["0"-"9"])+ <EXPOENTE>
      |	(["0"-"9"])+ (<EXPOENTE>)?
	>
|	< #EXPOENTE : ["e","E"] (["+","-"])? (["0"-"9"])+ >
|	< #LETRA : ["a"-"z"] >
|	< #DIGITO : ["0"-"9"] >
}


TOKEN : {
	<ROTULO : <INTEIRO_LITERAL> >
}

TOKEN : {
	< CARACTER : <APOSTROFE> <LETRA> <APOSTROFE> >
}

TOKEN : {
	< INTERVALO :
		(["0"-"9"])+ ".." (["0"-"9"])+ 
	|	["a"-"z"] ".." ["a"-"z"]
	>
}

SKIP : {
	<COMENTARIO: <INICIO_COMENTARIO_CHAVE> (~[])* <FIM_COMENTARIO_CHAVE> | <INICIO_COMENTARIO_PARENTESE_ASTERISCO> (~[])* <FIM_COMENTARIO_PARENTESE_ASTERISCO>	>
|	<#INICIO_COMENTARIO_CHAVE : "{" >
|	<#INICIO_COMENTARIO_PARENTESE_ASTERISCO : "(*" >
|	<#FIM_COMENTARIO_CHAVE : "}" >
|	<#FIM_COMENTARIO_PARENTESE_ASTERISCO : "*)" >
}

SKIP :
{
	" "
|	"\t"
|	"\n"
|	"\r"
|	"\f"
}

void AcessoVariavel() :
{}
{
	<IDENTIFICADOR> (LOOKAHEAD(2)
		( <ABRE_COLCHETE> Expressao() ( <VIRGULA> Expressao() )* <FECHA_COLCHETE> )
	|	( <PONTO> <IDENTIFICADOR> )
	)*
}

void Bloco() :
{}
{
	( DeclaracaoRotulos() )?
	( DefinicaoConstantes() )?
	( DefinicaoTipos() )?
	( DeclaracaoVariaveis() )?
	( ( DeclaracaoProcedimento() | DeclaracaoFuncao() ) <PONTO_VIRGULA> )*
	ComandoComposto()
}

void CabecalhoFuncao () :
{}
{
	IdentificadorFuncao() ( ListaFormalParametro() )? <DOIS_PONTOS> <IDENTIFICADOR>
}

void CabecalhoProcedimento() :
{}
{
	IdentificadorProcedimento() ( ListaFormalParametro() )?
}

void CabecalhoPrograma() :
{}
{
	<PROGRAM> <IDENTIFICADOR> ( <ABRE_PARENTESE> ListaIdentificador() <FECHA_PARENTESE> )?
}

void ChamadaProcedimento() :
{}
{
	<IDENTIFICADOR> ( ListaParametro() )?
}

void Comando() :
{}
{
	( <ROTULO> <DOIS_PONTOS> )? (ComandoSimples() | ComandoEstruturado())
}

void ComandoAtribuicao():
{}
{
	AcessoVariavel() <ATRIBUICAO> Expressao()
}

void ComandoComposto() :
{}
{
	<BEGIN> SequenciaComando() <END>
}

void ComandoEstruturado() :
{}
{
	ComandoComposto() | ComandoIf() | ComandoRepetitivo() | ComandoWith()
}

void ComandoFor() :
{}
{
	<FOR> <IDENTIFICADOR> <ATRIBUICAO> Expressao() ( <TO> | <DOWNTO> ) Expressao() <DO> Comando()
}

void ComandoGoto() :
{}
{
	<GOTO> <ROTULO>
}

void ComandoIf() :
{}
{
	<IF> Expressao() <THEN> Comando() ( LOOKAHEAD(2)<ELSE> Comando() )?
}

void ComandoRepeat() :
{}
{
	<REPEAT> SequenciaComando() <UNTIL> Expressao()
}

void ComandoRepetitivo() :
{}
{
	ComandoRepeat() | ComandoWhile() | ComandoFor()
}

void ComandoSimples() :
{}
{
	ComandoVazio() | LOOKAHEAD(2)ComandoAtribuicao() | ComandoGoto() | LOOKAHEAD(2)ChamadaProcedimento()
}

void ComandoVazio() :
{}
{
	""	
}

void ComandoWhile() :
{}
{
	<WHILE> Expressao() <DO> Comando()
}

void ComandoWith() :
{}
{
	<WITH> ListaVariavelRegistro() <DO> Comando()
}

void Constante() :
{}
{
	( <MAIS> | <MENOS> )? <NUMERO> | <CARACTER>
}

void ConstanteSemSinal() :
{}
{
	<NUMERO> | <CARACTER> | <IDENTIFICADOR>
}

void DeclaracaoFuncao() :
{}
{
	IdentificadorFuncao() ( ListaFormalParametro() )? <PONTO_VIRGULA> Bloco()
}

void DeclaracaoProcedimento() :
{}
{
	IdentificadorProcedimento() ( ListaFormalParametro() )? <PONTO_VIRGULA> Bloco()
}

void DeclaracaoRotulos() :
{}
{
	<LABEL> <ROTULO> ( <VIRGULA> <ROTULO> )* <PONTO_VIRGULA>
}

void DeclaracaoVariaveis() :
{}
{
	<VAR> (DeclaracaoVariavel() <PONTO_VIRGULA> )+
}

void DeclaracaoVariavel() :
{}
{
	ListaIdentificador() <DOIS_PONTOS> DenotadorTipo()
}

void DefinicaoConstante() :
{}
{
	<IDENTIFICADOR> <IGUAL> Constante()
}

void DefinicaoConstantes() :
{}
{
	<CONST> (DefinicaoConstante() <PONTO_VIRGULA> )+
}

void DefinicaoTipo() :
{}
{
	<IDENTIFICADOR> <IGUAL> DenotadorTipo()
}

void DefinicaoTipos() :
{}
{
	<TYPE> (DefinicaoTipo() <PONTO_VIRGULA> )+
}

void DenotadorTipo() :
{}
{
	 LOOKAHEAD(2)<IDENTIFICADOR> | LOOKAHEAD(2)NovoTipo()
}

void DesignadorFuncao() :
{}
{
	IdentificadorFuncao() ( LOOKAHEAD(2)ListaParametro() )?
}

void EspecificacaoParametroValor() :
{}
{
	ListaIdentificador() <DOIS_PONTOS> <IDENTIFICADOR>
}

void EspecificacaoParametroReferencia() :
{}
{
	<VAR> ListaIdentificador() <DOIS_PONTOS> <IDENTIFICADOR>
}

void EspecificacaoParametroFuncao() :
{}
{
	CabecalhoFuncao()
}

void EspecificacaoParametroProcedimento() :
{}
{
	CabecalhoProcedimento()
}

void Expressao() :
{}
{
      ExpressaoSimples() ( LOOKAHEAD(2)OperadorRelacional() ExpressaoSimples() )?
}

void ExpressaoSimples() :
{}
{
	( <MAIS> | <MENOS>)? Termo() ( LOOKAHEAD(2)OperadorAdicao() Termo() )*
}

void Fator() :
{}
{
	LOOKAHEAD(2)AcessoVariavel()
|	LOOKAHEAD(2)ConstanteSemSinal()
|	<ABRE_PARENTESE> Expressao() <FECHA_PARENTESE>
|	DesignadorFuncao()
}

void IdentificadorFuncao() :
{}
{
	<FUNCTION> <IDENTIFICADOR>
}

void IdentificadorProcedimento() :
{}
{
	<PROCEDURE> <IDENTIFICADOR>
}

void ListaCampo() :
{}
{
	SecaoRegistro() ( LOOKAHEAD(2)<PONTO_VIRGULA> SecaoRegistro() )? ( <PONTO_VIRGULA> )?
}

void ListaFormalParametro() :
{}
{
	<ABRE_PARENTESE> ParametroFormal() ( LOOKAHEAD(2)<PONTO_VIRGULA> ParametroFormal() )* <FECHA_PARENTESE>
}

void ListaIdentificador() :
{}
{
	<IDENTIFICADOR> ( <VIRGULA> <IDENTIFICADOR> )*
}

void ListaParametro() :
{}
{
	Parametro() ( LOOKAHEAD(2)<VIRGULA> Parametro() )*
}

void ListaVariavelRegistro() :
{}
{
	AcessoVariavel() ( <VIRGULA> AcessoVariavel() )*

}

void NovoTipo() :
{}
{
	TipoArray() | TipoRegistro()
}

void OperadorAdicao() :
{}
{
	<MAIS> | <MENOS> | <OR>
} 

void OperadorMultiplicacao() :
{}
{
	<BARRA> | <ASTERISCO> | <DIV> | <MOD> | <AND>
}

void OperadorRelacional():
{}
{
	<IGUAL> | <MENOR> | <MAIOR> | <DIFERENTE> | <MENOR_IGUAL> | <MAIOR_IGUAL> | <IN>
}

void ParametroFormal() :
{}
{
	EspecificacaoParametroValor() | EspecificacaoParametroReferencia() | EspecificacaoParametroFuncao() | EspecificacaoParametroProcedimento()
}

void Parametro() :
{}
{
	LOOKAHEAD(2)Expressao() | LOOKAHEAD(2)AcessoVariavel() | IdentificadorFuncao() | IdentificadorProcedimento()
}

void Programa() :
{}
{
     CabecalhoPrograma() <PONTO_VIRGULA> Bloco() <PONTO>
}

void SecaoRegistro() :
{}
{
	ListaIdentificador() <DOIS_PONTOS> DenotadorTipo()
}

void SequenciaComando() :
{}
{
	Comando() ( <PONTO_VIRGULA> Comando() )*
}

void Termo() :
{}
{
	Fator() ( LOOKAHEAD(2)OperadorMultiplicacao() Fator()  )*
}

void TipoArray() :
{}
{
	<ARRAY> <ABRE_COLCHETE> <INTERVALO> ( LOOKAHEAD(2)<VIRGULA> <INTERVALO> )* <FECHA_COLCHETE> <OF> DenotadorTipo()
}

void TipoEstruturado() :
{}
{
	TipoArray() | TipoRegistro() | <IDENTIFICADOR>
}

void TipoRegistro() :
{}
{
	<RECORD> ( ListaCampo() )? <END>
}