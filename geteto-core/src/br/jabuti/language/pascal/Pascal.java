/* Generated By:JavaCC: Do not edit this line. Pascal.java */
public class Pascal implements PascalConstants {
        public static void main (String[] args) {
                Pascal parser;
                String filename = null;
                long initTime = 0;
                long parseTime = 0;
                long startTime = 0;
                long stopTime = 0;
                if (args.length == 1) {
                    filename = args[0];
              System.out.println("Compilador Pascal\nLendo arquivo " + filename);

                        try {
                  parser = new Pascal(new java.io.FileInputStream(filename));
              } catch (java.io.FileNotFoundException e) {
                    System.out.println("Arquivo nao encontrado.");
                        return;
                        }
                } else {
                        System.out.println("Argumento invalido.");
                        System.out.println("Como usar: java Pascal <arquivo>");
                        return;
                }

                try {
                        startTime = System.currentTimeMillis();
                        parser.Programa();
                        stopTime = System.currentTimeMillis();
                        parseTime = stopTime - startTime;
                        System.out.println("Nao foram encontrados erros em " + filename + " (" + parseTime + " ms).");
                } catch (ParseException e) {
                        stopTime = System.currentTimeMillis();
                        parseTime = stopTime - startTime;
                        System.out.println(e.getMessage());
                        System.out.println("Foram encontrados erros em " + filename + " (" + parseTime + " ms).");
                }
        }

  static final public void AcessoVariavel() throws ParseException {
    trace_call("AcessoVariavel");
    try {
      jj_consume_token(IDENTIFICADOR);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRE_COLCHETE:
        case PONTO:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(2)) {
          jj_consume_token(ABRE_COLCHETE);
          Expressao();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VIRGULA:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            jj_consume_token(VIRGULA);
            Expressao();
          }
          jj_consume_token(FECHA_COLCHETE);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PONTO:
            jj_consume_token(PONTO);
            jj_consume_token(IDENTIFICADOR);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("AcessoVariavel");
    }
  }

  static final public void Bloco() throws ParseException {
    trace_call("Bloco");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        DeclaracaoRotulos();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        DefinicaoConstantes();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        DefinicaoTipos();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        DeclaracaoVariaveis();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case PROCEDURE:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROCEDURE:
          DeclaracaoProcedimento();
          break;
        case FUNCTION:
          DeclaracaoFuncao();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PONTO_VIRGULA);
      }
      ComandoComposto();
    } finally {
      trace_return("Bloco");
    }
  }

  static final public void CabecalhoFuncao() throws ParseException {
    trace_call("CabecalhoFuncao");
    try {
      IdentificadorFuncao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESE:
        ListaFormalParametro();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(DOIS_PONTOS);
      jj_consume_token(IDENTIFICADOR);
    } finally {
      trace_return("CabecalhoFuncao");
    }
  }

  static final public void CabecalhoProcedimento() throws ParseException {
    trace_call("CabecalhoProcedimento");
    try {
      IdentificadorProcedimento();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESE:
        ListaFormalParametro();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } finally {
      trace_return("CabecalhoProcedimento");
    }
  }

  static final public void CabecalhoPrograma() throws ParseException {
    trace_call("CabecalhoPrograma");
    try {
      jj_consume_token(PROGRAM);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESE:
        jj_consume_token(ABRE_PARENTESE);
        ListaIdentificador();
        jj_consume_token(FECHA_PARENTESE);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } finally {
      trace_return("CabecalhoPrograma");
    }
  }

  static final public void ChamadaProcedimento() throws ParseException {
    trace_call("ChamadaProcedimento");
    try {
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case PROCEDURE:
      case MAIS:
      case MENOS:
      case ABRE_PARENTESE:
      case IDENTIFICADOR:
      case NUMERO:
      case CARACTER:
        ListaParametro();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } finally {
      trace_return("ChamadaProcedimento");
    }
  }

  static final public void Comando() throws ParseException {
    trace_call("Comando");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROTULO:
        jj_consume_token(ROTULO);
        jj_consume_token(DOIS_PONTOS);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOTO:
      case IDENTIFICADOR:
      case 76:
        ComandoSimples();
        break;
      case BEGIN:
      case FOR:
      case IF:
      case REPEAT:
      case WHILE:
      case WITH:
        ComandoEstruturado();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Comando");
    }
  }

  static final public void ComandoAtribuicao() throws ParseException {
    trace_call("ComandoAtribuicao");
    try {
      AcessoVariavel();
      jj_consume_token(ATRIBUICAO);
      Expressao();
    } finally {
      trace_return("ComandoAtribuicao");
    }
  }

  static final public void ComandoComposto() throws ParseException {
    trace_call("ComandoComposto");
    try {
      jj_consume_token(BEGIN);
      SequenciaComando();
      jj_consume_token(END);
    } finally {
      trace_return("ComandoComposto");
    }
  }

  static final public void ComandoEstruturado() throws ParseException {
    trace_call("ComandoEstruturado");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
        ComandoComposto();
        break;
      case IF:
        ComandoIf();
        break;
      case FOR:
      case REPEAT:
      case WHILE:
        ComandoRepetitivo();
        break;
      case WITH:
        ComandoWith();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ComandoEstruturado");
    }
  }

  static final public void ComandoFor() throws ParseException {
    trace_call("ComandoFor");
    try {
      jj_consume_token(FOR);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ATRIBUICAO);
      Expressao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        jj_consume_token(TO);
        break;
      case DOWNTO:
        jj_consume_token(DOWNTO);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expressao();
      jj_consume_token(DO);
      Comando();
    } finally {
      trace_return("ComandoFor");
    }
  }

  static final public void ComandoGoto() throws ParseException {
    trace_call("ComandoGoto");
    try {
      jj_consume_token(GOTO);
      jj_consume_token(ROTULO);
    } finally {
      trace_return("ComandoGoto");
    }
  }

  static final public void ComandoIf() throws ParseException {
    trace_call("ComandoIf");
    try {
      jj_consume_token(IF);
      Expressao();
      jj_consume_token(THEN);
      Comando();
      if (jj_2_2(2)) {
        jj_consume_token(ELSE);
        Comando();
      } else {
        ;
      }
    } finally {
      trace_return("ComandoIf");
    }
  }

  static final public void ComandoRepeat() throws ParseException {
    trace_call("ComandoRepeat");
    try {
      jj_consume_token(REPEAT);
      SequenciaComando();
      jj_consume_token(UNTIL);
      Expressao();
    } finally {
      trace_return("ComandoRepeat");
    }
  }

  static final public void ComandoRepetitivo() throws ParseException {
    trace_call("ComandoRepetitivo");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPEAT:
        ComandoRepeat();
        break;
      case WHILE:
        ComandoWhile();
        break;
      case FOR:
        ComandoFor();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ComandoRepetitivo");
    }
  }

  static final public void ComandoSimples() throws ParseException {
    trace_call("ComandoSimples");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
        ComandoVazio();
        break;
      default:
        jj_la1[18] = jj_gen;
        if (jj_2_3(2)) {
          ComandoAtribuicao();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GOTO:
            ComandoGoto();
            break;
          default:
            jj_la1[19] = jj_gen;
            if (jj_2_4(2)) {
              ChamadaProcedimento();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } finally {
      trace_return("ComandoSimples");
    }
  }

  static final public void ComandoVazio() throws ParseException {
    trace_call("ComandoVazio");
    try {
      jj_consume_token(76);
    } finally {
      trace_return("ComandoVazio");
    }
  }

  static final public void ComandoWhile() throws ParseException {
    trace_call("ComandoWhile");
    try {
      jj_consume_token(WHILE);
      Expressao();
      jj_consume_token(DO);
      Comando();
    } finally {
      trace_return("ComandoWhile");
    }
  }

  static final public void ComandoWith() throws ParseException {
    trace_call("ComandoWith");
    try {
      jj_consume_token(WITH);
      ListaVariavelRegistro();
      jj_consume_token(DO);
      Comando();
    } finally {
      trace_return("ComandoWith");
    }
  }

  static final public void Constante() throws ParseException {
    trace_call("Constante");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
      case MENOS:
      case NUMERO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MAIS:
            jj_consume_token(MAIS);
            break;
          case MENOS:
            jj_consume_token(MENOS);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        jj_consume_token(NUMERO);
        break;
      case CARACTER:
        jj_consume_token(CARACTER);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Constante");
    }
  }

  static final public void ConstanteSemSinal() throws ParseException {
    trace_call("ConstanteSemSinal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case CARACTER:
        jj_consume_token(CARACTER);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ConstanteSemSinal");
    }
  }

  static final public void DeclaracaoFuncao() throws ParseException {
    trace_call("DeclaracaoFuncao");
    try {
      IdentificadorFuncao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESE:
        ListaFormalParametro();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(PONTO_VIRGULA);
      Bloco();
    } finally {
      trace_return("DeclaracaoFuncao");
    }
  }

  static final public void DeclaracaoProcedimento() throws ParseException {
    trace_call("DeclaracaoProcedimento");
    try {
      IdentificadorProcedimento();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESE:
        ListaFormalParametro();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(PONTO_VIRGULA);
      Bloco();
    } finally {
      trace_return("DeclaracaoProcedimento");
    }
  }

  static final public void DeclaracaoRotulos() throws ParseException {
    trace_call("DeclaracaoRotulos");
    try {
      jj_consume_token(LABEL);
      jj_consume_token(ROTULO);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_4;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(ROTULO);
      }
      jj_consume_token(PONTO_VIRGULA);
    } finally {
      trace_return("DeclaracaoRotulos");
    }
  }

  static final public void DeclaracaoVariaveis() throws ParseException {
    trace_call("DeclaracaoVariaveis");
    try {
      jj_consume_token(VAR);
      label_5:
      while (true) {
        DeclaracaoVariavel();
        jj_consume_token(PONTO_VIRGULA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_5;
        }
      }
    } finally {
      trace_return("DeclaracaoVariaveis");
    }
  }

  static final public void DeclaracaoVariavel() throws ParseException {
    trace_call("DeclaracaoVariavel");
    try {
      ListaIdentificador();
      jj_consume_token(DOIS_PONTOS);
      DenotadorTipo();
    } finally {
      trace_return("DeclaracaoVariavel");
    }
  }

  static final public void DefinicaoConstante() throws ParseException {
    trace_call("DefinicaoConstante");
    try {
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      Constante();
    } finally {
      trace_return("DefinicaoConstante");
    }
  }

  static final public void DefinicaoConstantes() throws ParseException {
    trace_call("DefinicaoConstantes");
    try {
      jj_consume_token(CONST);
      label_6:
      while (true) {
        DefinicaoConstante();
        jj_consume_token(PONTO_VIRGULA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_6;
        }
      }
    } finally {
      trace_return("DefinicaoConstantes");
    }
  }

  static final public void DefinicaoTipo() throws ParseException {
    trace_call("DefinicaoTipo");
    try {
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      DenotadorTipo();
    } finally {
      trace_return("DefinicaoTipo");
    }
  }

  static final public void DefinicaoTipos() throws ParseException {
    trace_call("DefinicaoTipos");
    try {
      jj_consume_token(TYPE);
      label_7:
      while (true) {
        DefinicaoTipo();
        jj_consume_token(PONTO_VIRGULA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_7;
        }
      }
    } finally {
      trace_return("DefinicaoTipos");
    }
  }

  static final public void DenotadorTipo() throws ParseException {
    trace_call("DenotadorTipo");
    try {
      if (jj_2_5(2)) {
        jj_consume_token(IDENTIFICADOR);
      } else if (jj_2_6(2)) {
        NovoTipo();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("DenotadorTipo");
    }
  }

  static final public void DesignadorFuncao() throws ParseException {
    trace_call("DesignadorFuncao");
    try {
      IdentificadorFuncao();
      if (jj_2_7(2)) {
        ListaParametro();
      } else {
        ;
      }
    } finally {
      trace_return("DesignadorFuncao");
    }
  }

  static final public void EspecificacaoParametroValor() throws ParseException {
    trace_call("EspecificacaoParametroValor");
    try {
      ListaIdentificador();
      jj_consume_token(DOIS_PONTOS);
      jj_consume_token(IDENTIFICADOR);
    } finally {
      trace_return("EspecificacaoParametroValor");
    }
  }

  static final public void EspecificacaoParametroReferencia() throws ParseException {
    trace_call("EspecificacaoParametroReferencia");
    try {
      jj_consume_token(VAR);
      ListaIdentificador();
      jj_consume_token(DOIS_PONTOS);
      jj_consume_token(IDENTIFICADOR);
    } finally {
      trace_return("EspecificacaoParametroReferencia");
    }
  }

  static final public void EspecificacaoParametroFuncao() throws ParseException {
    trace_call("EspecificacaoParametroFuncao");
    try {
      CabecalhoFuncao();
    } finally {
      trace_return("EspecificacaoParametroFuncao");
    }
  }

  static final public void EspecificacaoParametroProcedimento() throws ParseException {
    trace_call("EspecificacaoParametroProcedimento");
    try {
      CabecalhoProcedimento();
    } finally {
      trace_return("EspecificacaoParametroProcedimento");
    }
  }

  static final public void Expressao() throws ParseException {
    trace_call("Expressao");
    try {
      ExpressaoSimples();
      if (jj_2_8(2)) {
        OperadorRelacional();
        ExpressaoSimples();
      } else {
        ;
      }
    } finally {
      trace_return("Expressao");
    }
  }

  static final public void ExpressaoSimples() throws ParseException {
    trace_call("ExpressaoSimples");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
      case MENOS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
          jj_consume_token(MAIS);
          break;
        case MENOS:
          jj_consume_token(MENOS);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      Termo();
      label_8:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_8;
        }
        OperadorAdicao();
        Termo();
      }
    } finally {
      trace_return("ExpressaoSimples");
    }
  }

  static final public void Fator() throws ParseException {
    trace_call("Fator");
    try {
      if (jj_2_10(2)) {
        AcessoVariavel();
      } else if (jj_2_11(2)) {
        ConstanteSemSinal();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRE_PARENTESE:
          jj_consume_token(ABRE_PARENTESE);
          Expressao();
          jj_consume_token(FECHA_PARENTESE);
          break;
        case FUNCTION:
          DesignadorFuncao();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Fator");
    }
  }

  static final public void IdentificadorFuncao() throws ParseException {
    trace_call("IdentificadorFuncao");
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFICADOR);
    } finally {
      trace_return("IdentificadorFuncao");
    }
  }

  static final public void IdentificadorProcedimento() throws ParseException {
    trace_call("IdentificadorProcedimento");
    try {
      jj_consume_token(PROCEDURE);
      jj_consume_token(IDENTIFICADOR);
    } finally {
      trace_return("IdentificadorProcedimento");
    }
  }

  static final public void ListaCampo() throws ParseException {
    trace_call("ListaCampo");
    try {
      SecaoRegistro();
      if (jj_2_12(2)) {
        jj_consume_token(PONTO_VIRGULA);
        SecaoRegistro();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO_VIRGULA:
        jj_consume_token(PONTO_VIRGULA);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } finally {
      trace_return("ListaCampo");
    }
  }

  static final public void ListaFormalParametro() throws ParseException {
    trace_call("ListaFormalParametro");
    try {
      jj_consume_token(ABRE_PARENTESE);
      ParametroFormal();
      label_9:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(PONTO_VIRGULA);
        ParametroFormal();
      }
      jj_consume_token(FECHA_PARENTESE);
    } finally {
      trace_return("ListaFormalParametro");
    }
  }

  static final public void ListaIdentificador() throws ParseException {
    trace_call("ListaIdentificador");
    try {
      jj_consume_token(IDENTIFICADOR);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_10;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(IDENTIFICADOR);
      }
    } finally {
      trace_return("ListaIdentificador");
    }
  }

  static final public void ListaParametro() throws ParseException {
    trace_call("ListaParametro");
    try {
      Parametro();
      label_11:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(VIRGULA);
        Parametro();
      }
    } finally {
      trace_return("ListaParametro");
    }
  }

  static final public void ListaVariavelRegistro() throws ParseException {
    trace_call("ListaVariavelRegistro");
    try {
      AcessoVariavel();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_12;
        }
        jj_consume_token(VIRGULA);
        AcessoVariavel();
      }
    } finally {
      trace_return("ListaVariavelRegistro");
    }
  }

  static final public void NovoTipo() throws ParseException {
    trace_call("NovoTipo");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        TipoArray();
        break;
      case RECORD:
        TipoRegistro();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("NovoTipo");
    }
  }

  static final public void OperadorAdicao() throws ParseException {
    trace_call("OperadorAdicao");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
        jj_consume_token(MAIS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OperadorAdicao");
    }
  }

  static final public void OperadorMultiplicacao() throws ParseException {
    trace_call("OperadorMultiplicacao");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BARRA:
        jj_consume_token(BARRA);
        break;
      case ASTERISCO:
        jj_consume_token(ASTERISCO);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OperadorMultiplicacao");
    }
  }

  static final public void OperadorRelacional() throws ParseException {
    trace_call("OperadorRelacional");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
        break;
      case MENOR_IGUAL:
        jj_consume_token(MENOR_IGUAL);
        break;
      case MAIOR_IGUAL:
        jj_consume_token(MAIOR_IGUAL);
        break;
      case IN:
        jj_consume_token(IN);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OperadorRelacional");
    }
  }

  static final public void ParametroFormal() throws ParseException {
    trace_call("ParametroFormal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        EspecificacaoParametroValor();
        break;
      case VAR:
        EspecificacaoParametroReferencia();
        break;
      case FUNCTION:
        EspecificacaoParametroFuncao();
        break;
      case PROCEDURE:
        EspecificacaoParametroProcedimento();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ParametroFormal");
    }
  }

  static final public void Parametro() throws ParseException {
    trace_call("Parametro");
    try {
      if (jj_2_15(2)) {
        Expressao();
      } else if (jj_2_16(2)) {
        AcessoVariavel();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          IdentificadorFuncao();
          break;
        case PROCEDURE:
          IdentificadorProcedimento();
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Parametro");
    }
  }

  static final public void Programa() throws ParseException {
    trace_call("Programa");
    try {
      CabecalhoPrograma();
      jj_consume_token(PONTO_VIRGULA);
      Bloco();
      jj_consume_token(PONTO);
    } finally {
      trace_return("Programa");
    }
  }

  static final public void SecaoRegistro() throws ParseException {
    trace_call("SecaoRegistro");
    try {
      ListaIdentificador();
      jj_consume_token(DOIS_PONTOS);
      DenotadorTipo();
    } finally {
      trace_return("SecaoRegistro");
    }
  }

  static final public void SequenciaComando() throws ParseException {
    trace_call("SequenciaComando");
    try {
      Comando();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PONTO_VIRGULA:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_13;
        }
        jj_consume_token(PONTO_VIRGULA);
        Comando();
      }
    } finally {
      trace_return("SequenciaComando");
    }
  }

  static final public void Termo() throws ParseException {
    trace_call("Termo");
    try {
      Fator();
      label_14:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_14;
        }
        OperadorMultiplicacao();
        Fator();
      }
    } finally {
      trace_return("Termo");
    }
  }

  static final public void TipoArray() throws ParseException {
    trace_call("TipoArray");
    try {
      jj_consume_token(ARRAY);
      jj_consume_token(ABRE_COLCHETE);
      jj_consume_token(INTERVALO);
      label_15:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(INTERVALO);
      }
      jj_consume_token(FECHA_COLCHETE);
      jj_consume_token(OF);
      DenotadorTipo();
    } finally {
      trace_return("TipoArray");
    }
  }

  static final public void TipoEstruturado() throws ParseException {
    trace_call("TipoEstruturado");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        TipoArray();
        break;
      case RECORD:
        TipoRegistro();
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("TipoEstruturado");
    }
  }

  static final public void TipoRegistro() throws ParseException {
    trace_call("TipoRegistro");
    try {
      jj_consume_token(RECORD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        ListaCampo();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(END);
    } finally {
      trace_return("TipoRegistro");
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_11();
    jj_save(10, xla);
    return retval;
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_12();
    jj_save(11, xla);
    return retval;
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_13();
    jj_save(12, xla);
    return retval;
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_14();
    jj_save(13, xla);
    return retval;
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_15();
    jj_save(14, xla);
    return retval;
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_16();
    jj_save(15, xla);
    return retval;
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_17();
    jj_save(16, xla);
    return retval;
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_18();
    jj_save(17, xla);
    return retval;
  }

  static final private boolean jj_3R_77() {
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(ABRE_COLCHETE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_16()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_3R_80()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_scan_token(VAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_scan_token(PONTO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_3R_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(INTERVALO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(IN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_97()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_scan_token(MAIOR_IGUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_scan_token(RECORD)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(END)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_scan_token(MENOR_IGUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ABRE_COLCHETE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_3R_76()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_scan_token(AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_scan_token(DIFERENTE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(MOD)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_scan_token(CARACTER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_3R_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_scan_token(MAIOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_scan_token(DIV)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_scan_token(NUMERO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_3R_103()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_3R_16()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_scan_token(MENOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_scan_token(OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_3R_75()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(ASTERISCO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_3R_96()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_scan_token(WITH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_scan_token(IGUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_scan_token(MENOS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_3R_71()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_102()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_scan_token(PONTO_VIRGULA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_29()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_scan_token(BARRA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_scan_token(76)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_scan_token(MAIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_3R_91()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_30()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_3R_70()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_3R_101()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_3R_69()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_3R_30()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_scan_token(PONTO_VIRGULA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_28()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_scan_token(IF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_3R_68()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_25()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_3R_28()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_scan_token(BEGIN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_scan_token(MENOS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ATRIBUICAO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_scan_token(ABRE_PARENTESE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_16()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_scan_token(ROTULO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(MAIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_25()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_3R_90()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_3R_80()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public PascalTokenManager token_source;
  static ASCII_UCodeESC_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[45];
  static final private int[] jj_la1_0 = {0x0,0x0,0x0,0x20000,0x40,0x40000000,0x0,0x802000,0x802000,0x0,0x0,0x0,0x802000,0x0,0x400d008,0x4009008,0x20000200,0x4001000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x2000004,0x200000,0x40082,0x10000,0x802000,0x802000,0x0,0x2000004,0x0,};
  static final private int[] jj_la1_1 = {0x1400,0x2000,0x1000,0x0,0x0,0x0,0x1,0x0,0x0,0x10000,0x10000,0x10000,0x3010018,0x80000000,0x1000006,0x6,0x0,0x2,0x0,0x0,0x18,0x18,0x2000018,0x3000000,0x10000,0x10000,0x2000,0x1000000,0x1000000,0x1000000,0x18,0x18,0x10000,0x8000,0x2000,0x2000,0x0,0x18,0x60,0x1c0380,0x1000001,0x0,0x8000,0x1000000,0x1000000,};
  static final private int[] jj_la1_2 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1000,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  static final private JJCalls[] jj_2_rtns = new JJCalls[18];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Pascal(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new PascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Pascal(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new PascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Pascal(PascalTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PascalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[77];
    for (int i = 0; i < 77; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 77; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

  static final public void enable_tracing() {
    trace_enabled = true;
  }

  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static final private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static final private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static final private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(">" + where);
    }
  }

  static final private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
